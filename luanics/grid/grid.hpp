#pragma once

#include <cstddef>
#include <iosfwd>

namespace luanics::grid {

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///
/// @class grid
///
/// @brief Represents a fixed-size, two-dimensional grid of elements.
///
/// Standard way to display is with origin (0,0) at bottom left.
///
/// ^ y
/// |
/// |
/// *----> x
///
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class grid {
public:
	//////////////////////////////////////////////////////////////////
	/// @name Definitions
	//////////////////////////////////////////////////////////////////
	//@{
	static constexpr char empty_value = ' ';
	using value_type = char;
	//@}

	//////////////////////////////////////////////////////////////////
	/// @name Management
	//////////////////////////////////////////////////////////////////
	//@{
	virtual ~grid() = default;
	//@}

	//////////////////////////////////////////////////////////////////
	/// @name Attributes
	//////////////////////////////////////////////////////////////////
	//@{
	virtual std::size_t width() const = 0;
	virtual std::size_t height() const = 0;
	//@}

	//////////////////////////////////////////////////////////////////
	/// @name Access
	//////////////////////////////////////////////////////////////////
	//@{
	/// @pre x < width and y < height
	virtual value_type & operator()(
		std::size_t const x,
		std::size_t const y
	) = 0;
	/// @pre x < width and y < height
	virtual value_type const & operator()(
		std::size_t const x,
		std::size_t const y
	) const = 0;
	//@}

	//////////////////////////////////////////////////////////////////
	/// @name Modification
	//////////////////////////////////////////////////////////////////
	//@{
	/// Fills with EmptyValue
	virtual void clear() = 0;
	virtual void fill_with(value_type const value) = 0;
	//@}

	//////////////////////////////////////////////////////////////////
	/// @name Io
	//////////////////////////////////////////////////////////////////
	//@{
	/// Default implementation provided using operator()
	virtual void write_to(std::ostream & out) const = 0;
	/// Default implementation provided using operator()
	virtual void read_from(std::istream & in) = 0;
	//@}

}; // class Grid

bool operator==(grid const & lhs, grid const & rhs);
bool operator!=(grid const & lhs, grid const & rhs);

std::ostream & operator<<(std::ostream & out, grid const & grid);
std::istream & operator>>(std::istream & in, grid & grid);

} // namespace luanics::grid
